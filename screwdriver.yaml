jobs:
    test:
        image: rust:latest
        requires: [~pr, ~commit]
        steps:
            - setup: echo "get and extract"
            - cd: cd app 
            - test: cargo test
            - teardown: |
                env
                if [ `uname` = 'Darwin' ]; then 
                  export SD_CURL_CMD_WRAPPER="eval" && export SD_ZIP_CMD_WRAPPER=""; 
                else 
                  export SD_CURL_CMD_WRAPPER="$(echo 'sd-step exec --pkg-version 7.54.1 core/curl')" && export SD_ZIP_CMD_WRAPPER="$(echo 'sd-step exec core/zip')"; 
                fi
                cd $SD_ARTIFACTS_DIR
                find . -type f -print > manifest.txt
                CACHE_URL="https://10.0.2.15:9003"
                # if [ "$SD_ZIP_ARTIFACTS" = "true" ]; then 
                ZIPFILE=SD_ARTIFACT.zip && find . -type f -exec $SD_ZIP_CMD_WRAPPER zip $ZIPFILE {} + && f=`echo $ZIPFILE | sed "s/^\.\///"`; encoded=$($SD_CURL_CMD_WRAPPER "curl -s -w \"%{url_effective}\" --data-urlencode \"$f\" -G \"\" | sed -e \"s/^\/?//\"") && $SD_CURL_CMD_WRAPPER "curl -H \"Authorization: Bearer $SD_TOKEN\" -H \"Content-Type: text/plain\" -X PUT $CACHE_URL/v1/pipeline/$SD_PIPELINE_ID -T ./\"$f\""; else find . -type f -exec sh -c 'f=`echo $1 | sed "s/^\.\///"`; encoded=$($SD_CURL_CMD_WRAPPER "curl -s -w \"%{url_effective}\" --data-urlencode \"$f\" -G \"\" | sed -e \"s/^\/?//\""); $SD_CURL_CMD_WRAPPER "curl -H \"Authorization: Bearer $SD_TOKEN\" -H \"Content-Type: text/plain\" -X PUT $CACHE_URL/v1/pipeline/$SD_PIPELINE_ID/ -T ./\"$f\""' -- {} \;; 
                #fi

